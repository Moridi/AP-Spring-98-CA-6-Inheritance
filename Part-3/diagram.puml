@startuml

skinparam Monochrome true

title __Football Class Diagram__\n

class GameManagerInterface {
    + add_team_A_goalkeeper(info: PlayerInfo)
	+ add_team_A_defender(info: PlayerInfo)
	+ add_team_A_striker(info: PlayerInfo)
	+ add_team_B_goalkeeper(info: PlayerInfo)
	+ add_team_B_defender(info: PlayerInfo)
	+ add_team_B_striker(info: PlayerInfo)
	+ play()
	+ get_result(): String
}

class GameManagerLogic {
    + add_team_A_goalkeeper(info: PlayerInfo)
	+ add_team_A_defender(info: PlayerInfo)
	+ add_team_A_striker(info: PlayerInfo)
	+ add_team_B_goalkeeper(info: PlayerInfo)
	+ add_team_B_defender(info: PlayerInfo)
	+ add_team_B_striker(info: PlayerInfo)
	+ play()
	+ get_result(): String
}
note right of GameManagerLogic
Imagin player_a has the ball & want to forward through pllayer b:
GameManagerLogic: call <i>player_a->duel(player_b)</i> to get duel result 
Inside player_a duel method:
    We have player_a forward power(FP) 
    We get defence power of opponent <b>against player_a</b> by calling: <i>player_b->defend(this)</i>
        This is called <b>Double Dispatch</b>
    So we can return duel result as follow:
    <i>return FP > player_b->defend(this);</i>
end note

abstract class Player {
    - stamina : Integer
    - dribble : Integer
    - pass : Integer
    - defend : Integer
    {abstract} + duel(player: Player*) : Boolean
    {abstract} + defend(player: Player*) : Integer
}

class GoalKeeper {
    + duel(player: Player*) : Boolean
    + defend(player: Player*) : Integer
}

class Defender {
    + duel(player: Player*) : Boolean
    + defend(player: Player*) : Integer
}

class Striker {
    + duel(player: Player*) : Boolean
    + defend(player: Player*) : Integer
}

GameManagerInterface ..> GameManagerLogic
GameManagerLogic *---> Player: team_A_goalkeeper
GameManagerLogic *---> Player: team_A_defender
GameManagerLogic *---> Player: team_A_striker
GameManagerLogic *---> Player: team_B_goalkeeper
GameManagerLogic *---> Player: team_B_defender
GameManagerLogic *---> Player: team_B_striker
GameManagerLogic ..> GoalKeeper: create
GameManagerLogic ..> Defender: create
GameManagerLogic ..> Striker: create

GoalKeeper -up-|> Player
Defender -up-|> Player
Striker -up-|> Player


right footer


    Class diagram in design level
endfooter

@enduml